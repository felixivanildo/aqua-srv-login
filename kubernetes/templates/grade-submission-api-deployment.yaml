apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{.Values.microservice.name}}
  namespace: {{.Values.microservice.namespace}}
spec:
  replicas: {{.Values.microservice.replicas}}
  selector:
    matchLabels:
      app.kubernetes.io/instance: {{.Values.microservice.name}}
  strategy:
      type: RollingUpdate
      rollingUpdate:
        maxUnavailable: 50% #Ao menos 1 pod estará rodando
        maxSurge: 1 #Nace um novo pod por vez
  template:    
    metadata:
      labels:
        app.kubernetes.io/name: grade-submission
        app.kubernetes.io/component: backend
        app.kubernetes.io/instance: {{.Values.microservice.name}}
    spec:
      containers:
      - name: {{.Values.microservice.name}}
        image: {{.Values.workload.image}} #Docker hub image
        envFrom:
          - configMapRef:
              name: {{.Values.microservice.name}}-configmap
          - secretRef:
              name: {{.Values.microservice.name}}-secret
        livenessProbe:
          httpGet: #Meio da probe
            path: /health 
            port: {{.Values.workload.port}}
          initialDelaySeconds: {{.Values.workload.livenessDelay}} #Segundos para a primeira probe
          periodSeconds: 5 #Recorrencia da probe
        # readinessProbe:
        #   httpGet:
        #     path: /readyz
        #     port: {{.Values.workload.port}}
        #   initialDelaySeconds: 15 #Não é necessario para Readiness, só para deixar mais organizado
        #   periodSeconds: 5
        resources:
          requests:
            memory: {{.Values.workload.resources.memory}}
            cpu: {{.Values.workload.resources.cpu}}
          limits:
            memory: {{.Values.workload.limits.memory}}
        ports:
          - containerPort: {{.Values.workload.port}}
